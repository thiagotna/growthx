import 'dotenv/config'
import { IGeneratedPost } from './IGeneratedPost'
import { GoogleGenAI } from '@google/genai'

export class GeminiService {
  private genAI: GoogleGenAI

  constructor() {
    const apiKey = process.env.GOOGLE_API_KEY
    if (!apiKey) {
      throw new Error('GOOGLE_API_KEY is not defined in .env file')
    }
    this.genAI = new GoogleGenAI({
      apiKey: apiKey,
    })
  }

  public async generatePostContent(topic: string): Promise<IGeneratedPost> {
    const prompt = `
      Gere um artigo de blog sobre o tópico "${topic}".
      O artigo deve ser otimizado para SEO e seguir um tom informativo.
      Sua resposta DEVE ser um objeto JSON válido, sem nenhum texto ou formatação adicional antes ou depois dele.
      Use a seguinte estrutura JSON:
      {
        "title": "Um título atraente e otimizado para SEO",
        "body": "O conteúdo completo do artigo em formato Markdown. Inclua cabeçalhos (##), listas e negrito para estruturação.",
        "slug": "um-slug-curto-e-descritivo-para-a-url",
        "meta_title": "Um meta título para o Google com no máximo 60 caracteres"
      }
    `

    const modelContent = this.genAI.models.generateContent({
      model: 'gemini-1.5-flash',
      contents: prompt,
    })

    try {
      const result = await modelContent
      const text = result.text

      if (!text) throw new Error('No content generated by Gemini.')

      const jsonString = text
        .replace(/```json/g, '')
        .replace(/```/g, '')
        .trim()

      const parsedContent: IGeneratedPost = JSON.parse(jsonString)
      return parsedContent
    } catch (error) {
      console.error('Error generating content with Gemini:', error)
      throw new Error('Failed to generate post content.')
    }
  }
}
